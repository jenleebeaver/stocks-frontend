{"ast":null,"code":"var _jsxFileName = \"/Users/johndoe/stocks-app/stocks-frontend/src/components/portfoliosTable.js\",\n    _s = $RefreshSig$();\n\n// https://react-table.tanstack.com/docs/quick-start\nimport React from 'react';\nimport { useTable } from 'react-table';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PortfoliosTable(props) {\n  _s();\n\n  console.log('table', props.portfolios); //retrieve memoized(stores expensive function calls by returning cached results) data \n  //? can we use JSX to pass props into key value pairs?\n\n  const data = React.useMemo(() => [props.portfolios], [props.portfolios]); //set of memoized column definitions \n\n  const columns = React.useMemo(() => [{\n    Header: 'Name/Symbol',\n    accessor: 's'\n  }, {\n    Header: 'Price',\n    accessor: 'p'\n  }], []); //useTable hook\n\n  const tableInstance = useTable({\n    columns,\n    data\n  });\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = tableInstance;\n  return /*#__PURE__*/_jsxDEV(\"table\", { ...getTableProps(),\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: headerGroups.map(headerGroup =>\n      /*#__PURE__*/\n      // apply header row props \n      _jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n        children: headerGroup.headers.map(column =>\n        /*#__PURE__*/\n        // apply header cell props \n        _jsxDEV(\"th\", { ...column.getHeaderProps(),\n          children: //render header\n          column.render('Header')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n      children: //loop over table rows\n      rows.map(row => {\n        //display row \n        prepareRow(row);\n        return (\n          /*#__PURE__*/\n          // apply row props\n          _jsxDEV(\"tr\", { ...row.getRowProps(),\n            children: //loop over row cells\n            row.cells.map(cell => {\n              //apply cell props\n              return /*#__PURE__*/_jsxDEV(\"td\", { ...cell.getCellProps(),\n                children: //render cell content\n                cell.render('Cell')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 67,\n                columnNumber: 37\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 25\n          }, this)\n        );\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n}\n\n_s(PortfoliosTable, \"ZFp2ZLEtGvZJnB6k1IDEFGHd1go=\", false, function () {\n  return [useTable];\n});\n\n_c = PortfoliosTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"PortfoliosTable\");","map":{"version":3,"sources":["/Users/johndoe/stocks-app/stocks-frontend/src/components/portfoliosTable.js"],"names":["React","useTable","PortfoliosTable","props","console","log","portfolios","data","useMemo","columns","Header","accessor","tableInstance","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","getRowProps","cells","cell","getCellProps"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,aAAzB;;AAEA,eAAe,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAAA;;AAC3CC,EAAAA,OAAO,CAACC,GAAR,CAAa,OAAb,EAAsBF,KAAK,CAACG,UAA5B,EAD2C,CAG3C;AACA;;AACA,QAAMC,IAAI,GAAGP,KAAK,CAACQ,OAAN,CAAe,MAAM,CAACL,KAAK,CAACG,UAAP,CAArB,EAAyC,CAACH,KAAK,CAACG,UAAP,CAAzC,CAAb,CAL2C,CAO3C;;AACA,QAAMG,OAAO,GAAGT,KAAK,CAACQ,OAAN,CAAe,MAAM,CACjC;AACIE,IAAAA,MAAM,EAAE,aADZ;AAEIC,IAAAA,QAAQ,EAAE;AAFd,GADiC,EAKjC;AACID,IAAAA,MAAM,EAAE,OADZ;AAEIC,IAAAA,QAAQ,EAAE;AAFd,GALiC,CAArB,EAUhB,EAVgB,CAAhB,CAR2C,CAqB3C;;AACA,QAAMC,aAAa,GAAGX,QAAQ,CAAC;AAAEQ,IAAAA,OAAF;AAAWF,IAAAA;AAAX,GAAD,CAA9B;AAEA,QAAM;AACFM,IAAAA,aADE;AAEFC,IAAAA,iBAFE;AAGFC,IAAAA,YAHE;AAIFC,IAAAA,IAJE;AAKFC,IAAAA;AALE,MAMFL,aANJ;AAQA,sBACI,sBAAWC,aAAa,EAAxB;AAAA,4BACI;AAAA,gBAEKE,YAAY,CAACG,GAAb,CAAiBC,WAAW;AAAA;AACzB;AACA,yBAAQA,WAAW,CAACC,mBAAZ,EAAR;AAAA,kBAEKD,WAAW,CAACE,OAAZ,CAAoBH,GAApB,CAAwBI,MAAM;AAAA;AAC3B;AACA,2BAAQA,MAAM,CAACC,cAAP,EAAR;AAAA,oBACK;AACDD,UAAAA,MAAM,CAACE,MAAP,CAAc,QAAd;AAFJ;AAAA;AAAA;AAAA;AAAA,gBAFH;AAFL;AAAA;AAAA;AAAA;AAAA,cAFH;AAFL;AAAA;AAAA;AAAA;AAAA,YADJ,eAiBI,sBAAWV,iBAAiB,EAA5B;AAAA,gBACK;AACDE,MAAAA,IAAI,CAACE,GAAL,CAASO,GAAG,IAAI;AACZ;AACAR,QAAAA,UAAU,CAACQ,GAAD,CAAV;AACA;AAAA;AACI;AACA,6BAAQA,GAAG,CAACC,WAAJ,EAAR;AAAA,sBACK;AACDD,YAAAA,GAAG,CAACE,KAAJ,CAAUT,GAAV,CAAcU,IAAI,IAAI;AAClB;AACA,kCACI,mBAAQA,IAAI,CAACC,YAAL,EAAR;AAAA,0BACK;AACDD,gBAAAA,IAAI,CAACJ,MAAL,CAAY,MAAZ;AAFJ;AAAA;AAAA;AAAA;AAAA,sBADJ;AAMH,aARD;AAFJ;AAAA;AAAA;AAAA;AAAA;AAFJ;AAeH,OAlBD;AAFJ;AAAA;AAAA;AAAA;AAAA,YAjBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA2CH;;GA3EuBtB,e;UAsBED,Q;;;KAtBFC,e","sourcesContent":["// https://react-table.tanstack.com/docs/quick-start\nimport React from 'react';\nimport { useTable } from 'react-table'\n\nexport default function PortfoliosTable(props) {\n    console.log( 'table', props.portfolios)\n    \n    //retrieve memoized(stores expensive function calls by returning cached results) data \n    //? can we use JSX to pass props into key value pairs?\n    const data = React.useMemo( () => [props.portfolios], [props.portfolios])\n    \n    //set of memoized column definitions \n    const columns = React.useMemo( () => [\n        {\n            Header: 'Name/Symbol',\n            accessor: 's',\n        },\n        {\n            Header: 'Price',\n            accessor: 'p',\n        },\n    ],\n    []\n    )\n\n    //useTable hook\n    const tableInstance = useTable({ columns, data })\n\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        prepareRow,\n    } = tableInstance \n\n    return (\n        <table {...getTableProps()}>\n            <thead>\n                {/* loop over header rows */}\n                {headerGroups.map(headerGroup => (\n                    // apply header row props \n                    <tr {...headerGroup.getHeaderGroupProps()}>\n                        {/* loop over headers in each row  */}\n                        {headerGroup.headers.map(column => (\n                            // apply header cell props \n                            <th {...column.getHeaderProps()}>\n                                {//render header\n                                column.render('Header')}\n                            </th>\n                        ))}\n                    </tr>\n                ))}\n            </thead>\n            <tbody {...getTableBodyProps()}>\n                {//loop over table rows\n                rows.map(row => {\n                    //display row \n                    prepareRow(row)\n                    return (\n                        // apply row props\n                        <tr {...row.getRowProps()}>\n                            {//loop over row cells\n                            row.cells.map(cell => {\n                                //apply cell props\n                                return (\n                                    <td {...cell.getCellProps()}>\n                                        {//render cell content\n                                        cell.render('Cell')}\n                                    </td>\n                                )\n                            })}\n                        </tr>\n                    )\n                })}\n            </tbody>\n        </table>\n    )\n\n}\n\n"]},"metadata":{},"sourceType":"module"}